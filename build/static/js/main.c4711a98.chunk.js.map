{"version":3,"sources":["KycWidget.js","App.js","reportWebVitals.js","index.js"],"names":["KycWidget","useState","isOpen","setOpen","image","setImage","isUploaded","setIsUploaded","uploadPercentage","setUploadPercentage","formImage","setFormImage","verified","setVerified","className","src","alt","onClick","id","draggable","htmlFor","type","accept","onChange","e","target","files","reader","FileReader","onload","result","readAsDataURL","required","score","preventDefault","console","log","data","FormData","append","Array","from","options","onUploadProgress","progressEvent","loaded","total","percent","Math","floor","axios","post","then","res","catch","err","setTimeout","alert","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c4711a98.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './KycWidget.css';\r\nimport axios from \"axios\";\r\nimport { ProgressBar } from \"react-progressbar-fancy\";\r\n\r\nfunction KycWidget() {\r\n    const [isOpen, setOpen] = useState(false);\r\n    const [image, setImage] = useState('');\r\n    const [isUploaded, setIsUploaded] = useState(false);\r\n    const [uploadPercentage, setUploadPercentage] = useState(0);\r\n    const [formImage, setFormImage] = useState(null);\r\n    const [verified, setVerified] = useState(false);\r\n\r\n    const toggleOpen = () => {\r\n        setOpen(!isOpen);\r\n    }\r\n\r\n    const handleImageChange = (e) => {\r\n        if (e.target.files && e.target.files[0]) {\r\n            let reader = new FileReader();\r\n\r\n            reader.onload = function (e) {\r\n                setImage(e.target.result);\r\n                setIsUploaded(true);\r\n            }\r\n\r\n            reader.readAsDataURL(e.target.files[0]);\r\n            setFormImage(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n\r\n    const submit = (e) => {\r\n        e.preventDefault();\r\n        if (isUploaded) {\r\n            console.log(formImage);\r\n            let data = new FormData();\r\n            data.append('File', formImage);\r\n            console.log(Array.from(data));\r\n\r\n            const options = {\r\n                onUploadProgress: (progressEvent) => {\r\n                    const { loaded, total } = progressEvent;\r\n                    let percent = Math.floor((loaded * 100) / total)\r\n                    console.log(`${loaded}bytes of ${total}bytes | ${percent}%`);\r\n\r\n                    if (percent < 100) {\r\n                        setUploadPercentage(percent);\r\n                    }\r\n                }\r\n            }\r\n\r\n            axios.post(\"https://run.mocky.io/v3/a7aa46c2-dc29-4e89-aaab-b23e2871e1ae?mocky-delay=1800ms\",\r\n                formImage,\r\n                options\r\n            ).then(res => {\r\n                console.log(res);\r\n                setUploadPercentage(100);\r\n            }).catch(err => {\r\n                console.log(err);\r\n                setUploadPercentage(0);\r\n            })\r\n\r\n            setTimeout(() =>{\r\n                setVerified(true);\r\n            },7000);\r\n\r\n            setTimeout(()=>{\r\n                setOpen(false);\r\n            },10000);\r\n\r\n        }\r\n        else {\r\n            alert(\"Upload an Image\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"containers\">\r\n            <div className={`popupContainer ${!isOpen && \"hiddens\"}`}>\r\n                {/**Main widget content*/}\r\n                {\r\n                    !verified ? (\r\n                        <>\r\n                            <h2><img src=\"./images/logo.jpg\" />INSTANT KYC</h2>\r\n                            <form className=\"contents\">\r\n                                <h3>Upload KYC Document Image</h3>\r\n                                <p>Upload with preview</p>\r\n                                <div className=\"boxUpload\">\r\n                                    <div className=\"imageUpload\">\r\n                                        {\r\n                                            !isUploaded ? (\r\n                                                <>\r\n                                                    <label htmlFor=\"upload-input\">\r\n                                                        <img src=\"./images/folder.png\" draggable=\"false\" alt=\"placeholder\" />\r\n                                                        <p>Click to upload image</p>\r\n                                                    </label>\r\n                                                    <input id=\"upload-input\" type=\"file\"\r\n                                                        accept=\".jpg,.jpeg,.png\"\r\n                                                        onChange={handleImageChange}\r\n                                                        required={true} />\r\n                                                </>\r\n                                            ) : (\r\n                                                <div className=\"imgPreview\">\r\n                                                    <img className=\"close-icon\" src=\"./images/closeIcon.svg\" alt=\"closeIcon\"\r\n                                                        onClick={() => {\r\n                                                            setIsUploaded(false);\r\n                                                            setImage(null);\r\n                                                        }} />\r\n                                                    <img id=\"uploadedImg\" src={image} alt=\"uploadImage\" draggable=\"false\" />\r\n                                                </div>\r\n                                            )\r\n                                        }\r\n                                    </div>\r\n                                </div>\r\n                                {uploadPercentage > 0 && (\r\n                                    <div>\r\n                                        <ProgressBar score={uploadPercentage} className=\"progressBar\" />\r\n                                    </div>\r\n                                )}\r\n                                <button onClick={submit}>Upload</button>\r\n                            </form>\r\n                        </>\r\n                    ) : (\r\n                        <div>\r\n                            <h2><img src=\"./images/logo.jpg\" />INSTANT KYC</h2>\r\n                            <form className=\"contents\">\r\n                                <h3 className=\"progressLabel\">Your KYC application is in progress!!</h3>\r\n                                <img src=\"./images/progress.png\" className=\"progressKYC\"/>\r\n                            </form>\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n            <div className=\"btnContainer\" onClick={toggleOpen}>\r\n                <img className={`icons ${isOpen && \"hiddens\"}`} src=\"./images/kyc.png\" />\r\n                <img className={`icons ${!isOpen && \"hiddens\"}`} src=\"./images/close.png\" />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default KycWidget;\r\n","import './App.css';\nimport KycWidget from './KycWidget';\n\nfunction App() {\n  return (\n    <div>\n      <h1>THIS IS A DUMMY WEBSITE FOR TRIAL OF THE KYC WIDGET</h1>\n      <p>Â©Abhijeet Kumar</p>\n      <p>\n          <ul>\n            <li>The small icon at the bottom right is the clickable widget</li>\n            <li>Click on the icon and upload the document</li>\n            <li>You can remove the selected image by clicking on the close icon</li>\n            <li>Click on Upload for the uploading the image; wait for some time for the image to be uploaded</li>\n            <li>Once uploaded you can click on the icon to see that your application is in progress</li>\n          </ul>\n      </p>\n      <h5>Notable Features</h5>\n      <ul>\n        <li>Guard condition if user try to click on upload image without selecting any image</li>\n        <li>Popup open and close through the clickable icon</li>\n        <li>Progress animation for uploading</li>\n        <li>Remembers the user using useState</li>\n        <li>Allows the user to upload only document per user.</li>\n        <li>If the user try to click on the kyc icon again, it will show application in progress!!</li>\n        <li>The dialog automatically closes down after 5 seconds after submission</li>\n      </ul>\n      <KycWidget/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}